

### TYPES {{{1


#snippet fun "Simple function definition" b
#endsnippet
#snippet lambda "Lambda expression" b
#endsnippet
#snippet class "Class definition" b
#endsnippet
#snippet met "Method of a class" b
#endsnippet
#snippet attr "Attribute of a class" b
#endsnippet
#snippet const "Readonly variale" b
#endsnippet
#snippet macro "C-like macro" b
#endsnippet
#snippet int "Simple integer definition" b
#endsnippet
#snippet float "Simple floating point definition" b
#endsnippet
#snippet double "Double precission" b
#endsnippet
#snippet char "Character definition" b
#endsnippet
#snippet str "String definition" b
#endsnippet
#snippet dic "Relational array" b
#endsnippet
snippet arr "List of values" b
${1:variable_name} = [${2:1,2,3}]
endsnippet
#snippet pointer "Pointer-like variable" b
#endsnippet
#snippet reference "Reference-like variable" b
#endsnippet
#snippet enum "Enumeration definition" b
#endsnippet
#snippet struct "Structure construct" b
#endsnippet
#snippet type "Define custom type" b
#endsnippet
#snippet bin "Binary numbers" b
#endsnippet
#snippet hex "Hexadecimal numbers" b
#endsnippet
#snippet octal "Octal numbers" b
#endsnippet
#snippet bool "Boolean variables" b
#endsnippet
#snippet name "Namespace" b
#endsnippet
#snippet module "Define module, package etc.." b
#endsnippet
#snippet c<TYPE> "Constant type definition" b
#endsnippet
#snippet t<TYPE> "Type safe definition" b
#endsnippet
#snippet ct<TYPE> "Constant type safe definition" b
#endsnippet
#snippet a<TYPE> "Array 1D type definition" b
#endsnippet
#snippet ca<TYPE> "Array 1D type definition" b
#endsnippet


### BRANCHING {{{1


snippet if "If construct" b
if ${1:condition}:
	${2:${VISUAL:pass}}
endsnippet
snippet ife "If else construct" b
if ${1:condition}:
	${2:${VISUAL:pass}}
else:
	${3:pass}
endsnippet
snippet elif "Else if construct" b
elif ${1:condition}:
	${2:${VISUAL:pass}}
endsnippet
snippet else "Just else" b
else:
	${1:${VISUAL:pass}}
endsnippet
#snippet ifsh "If construct, short form" b
#endsnippet
#snippet if3 "If construct tertiary form" b
#endsnippet
snippet for "For with index" b
for ${1:item_index},${2:item} in enumerate(${3:iterable}):
	${4:${VISUAL:pass}}
endsnippet
snippet fori "For in iterator form" b
for ${1:item} in ${2:iterable}:
	${3:${VISUAL:pass}}
endsnippet
#snippet ford "For in dictionary/table form" b
#endsnippet
snippet while "While loop" b
while ${1:condition}:
	${2:pass}
endsnippet
#snippet until "Until loop" b
#endsnippet
#snippet case "Case construct" b
#endsnippet
snippet try "Try/catch" b
try:
	${1:${VISUAL:pass}}
except ${2:Exception} as ${3:e}:
	${4:raise $3}
else:
	${5:pass}
endsnippet
snippet ifm "If regex match" b
if re.match(r"${1:regex}", ${2:"${3:to match}"}):
	${4:pass}
endsnippet


### UTILS {{{1


snippet new "Instantiate object" b
${1:object_name} = ${2:ClassName}(${3:args})
endsnippet
snippet pac "Include some package" b
import ${1:os}$0
endsnippet
snippet so "Print to stdout" b
print(${1:"${2:text}"}${VISUAL})$0
endsnippet
#snippet serr "Print to stderr" b
#endsnippet
#snippet sex "Raise exception" b
#endsnippet
#snippet sof "Printf to stdout (formated)" b
#endsnippet
snippet read "Stdin read" b
${1:var} = input(${2:"${3:Type in something: }"})
endsnippet
snippet cd "Change dir" b
os.chdir(${1:"${2:path/to/dir}"})$0
endsnippet
snippet ls "List directory" b
os.listdir(${1:"."})$0
endsnippet
snippet sys "Talk to the shell" b
os.system(${1:"${2:command}"})
endsnippet
snippet mkdir "Create directory" b
os.mkdir(${1:"${2:path/to/dir}"}, mode=0o777)$0
endsnippet
snippet cp "Copy a file" b
shutil.copy(${1:src}, ${2:dest})$0
endsnippet
snippet cpr "Copy dir" b
shutil.copytree(${1:src}, ${2:dest})$0
endsnippet
#snippet fopen "File open" b
#endsnippet
#snippet fclose "File open" b
#endsnippet
#snippet fwrite "File write" b
#endsnippet
snippet fread "File read" b
for ${1:line} in ${2:file_descriptor}:
	${3:pass}
endsnippet
snippet exit "Exit a program with status" b
sys.exit(${1:1})$0
endsnippet
snippet ret "Return a value in function" b
return
endsnippet
snippet argc "Get arguments number" w
len(sys.argv)
endsnippet
snippet argvi "Get ith argument" w
sys.argv[${1:i}]$0
endsnippet
snippet match "Regex match" w
re.match(${1:r"${2:regex}"}, ${3:string})
endsnippet
#snippet sizeof "Get size of variables or types" b
#endsnippet
snippet basename "Bash basename" w
os.path.basename(${1:"${2:path}"})$0
endsnippet
snippet genv "Get Environment variables" b
os.environ[${1:"${2:VAR_NAME}"}]$0
endsnippet
snippet senv "Set Environment variables" b
os.environ[${1:"${2:VAR_NAME}"}]=${3:"${4:something}"}$0
endsnippet
snippet clear "stdout clear" b
os.system("clear")#NO_WINDOWS
endsnippet
snippet sleep "Sleep for some time" b
time.sleep(${1:1})
endsnippet
snippet shbang "Shbang for some scripting languages" b
#! /usr/bin/env python
# -*- coding: utf-8 -*-
endsnippet
#snippet slurp "Slurp, read a whole file at once" b
#endsnippet


### CONSTANTS {{{1


snippet true "True variable" b
True
endsnippet
snippet false "False keyword" b
False
endsnippet
snippet and "And operator" b
and
endsnippet
snippet or "Or operator" b
or
endsnippet
#snippet bor "Bitwise or" b
#endsnippet
#snippet band "Bitwise and" b
#endsnippet
#snippet nan "Not a number" b
#endsnippet
#snippet null "Undefined variable" b
#endsnippet
#snippet eof "End of file character" b
#endsnippet


### TEMPLATES {{{1


snippet argv-parse "Parse command line" b
import logging
import argparse


if __name__ == "__main__":
	parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter,
	description="$1")
$0
	parser.add_argument("-v",
		"--verbose",
		help    = "Make the output verbose",
		default = False,
		action  = "store_true"
	)
	parser.add_argument("-f",
		help   = "Input file.",
		action = "store"
	)
	parser.add_argument(
			"--log",
			help="Logging level",
			choices=[
				"INFO",
				"DEBUG",
				"WARNING",
				"ERROR",
				"CRITICAL"
				],
			action="store",
			default="WARNING"
			)
	# Parse arguments
	args = parser.parse_args()
	if args.verbose:
		args.log = "DEBUG"
	logging.basicConfig(level = getattr(logging, args.log))
endsnippet

snippet main "Main template" b
if __name__ == "__main__":
	${1:${VISUAL:main()}}
endsnippet
