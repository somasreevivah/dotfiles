##################
#  ARGS PARSING  #
##################

snippet check-version "Check python version code block" b
import sys
if sys.version_info < (${1:major_number}, ${2:minor_number}):
	raise "This script must use python $1.$2 or greater"
	sys.exit(1)
endsnippet

snippet utf-8 "utf 8 declaration" b
# -*- coding: utf-8 -*-
endsnippet

snippet shbang "Shebang #!" b
#! /usr/bin/env python
endsnippet

snippet argv-parse "Parse command line arguments" b
############################
#  COMMAND LINE INTERFACE  #
############################
import argparse

parser = argparse.ArgumentParser(description="$1")
$0
parser.add_argument("-v", "--verbose", help="Make the output verbose", action="store_true")
parser.add_argument("-f", help="Input file.", action="store")

def printv(arg1):
	"""
	Verbose print
	"""
	if VERBOSE:
		print(arg1)

if __name__=="__main__" :
	# Parse arguments
	args = parser.parse_args()

	if args.verbose:
		print("Making the command verbose...")
		VERBOSE=True
	else:
		VERBOSE=False
endsnippet

snippet subparser "Add a subparser to your cli" b
SUBPARSER_HELP="For further information for every command, type in '${1:your_progamn_name} <command> -h'"
subparsers = parser.add_subparsers(help=SUBPARSER_HELP, metavar="command", dest="command")

${2:command}_parser = subparsers.add_parser("${3:$2}", help="${4:Do $2}")

$2_parser.add_argument("-f", help="Input file.", action="store")
endsnippet

snippet arg-verbose "Add verbose to parser" b
${1:parser}.add_argument("-v", "--verbose", help="Make the output verbose", action="store_true")
endsnippet

snippet arg-optional "Add optional argument" b
${1:parser}.add_argument("-${2:f}"${2:, "--${3:long-name}"}, help="${4:Do some stuff}", action="${5:store_true}")
endsnippet

snippet arg-positional "Add positional argument" b
${1:parser}.add_argument("${2:name}", help="${3:Do some stuff}", action="${4:store}")
endsnippet


snippet so "Stdout function in python" b
print(${1:"${2:text}"})$0
endsnippet






########################
#  BASH LIKE COMMANDS  #
########################



snippet readlines "Read line by line of a file descriptro" b
for ${1:line} in ${2:file_descriptor}:
	${3:pass}
endsnippet

snippet exit "exit function" b
sys.exit(${1:1})$0
endsnippet

snippet mkdir "Make directory" b
os.mkdir(${1:"${2:path/to/dir}"}, mode=0777)$0
endsnippet

snippet cd "Change directory" b
os.chdir(${1:"${2:path/to/dir}"})$0
endsnippet

snippet env "Environment variable" i
os.environ[ ${1:"${2:VAR_NAME}"} ]$0
endsnippet

snippet ls "List of files" b
os.listdir(${1:"."})$0
endsnippet

snippet basename "Bash basename" i
os.path.basename(${1:"${2:path}"})$0
endsnippet

snippet exists "If a path exists" i
os.path.exists(${1:"${2:path}"})
endsnippet

############
#  SPHINX  #
############
snippet sph-param "Sphinx parameter" b
:param ${1:parameter_name}: ${2:Description}
:type  $1: ${3:parameter_type}
endsnippet

snippet sph-returns "Sphinx returns" b
:returns: ${1:Description}
${2::rtype:  ${3:return_type}}
endsnippet




#############
#  Classes  #
#############

snippet defxet "Setter and getter definition" b
def set${1:Name}(self${2:, ${3:args}}):
	pass
def get$1(self$2):
	pass
endsnippet



###################
#  General stuff  #
###################

snippet "im(port)?(\S+)" "Description" r
import ${1:`!p
snip.rv = match.group(2)
`}
endsnippet





