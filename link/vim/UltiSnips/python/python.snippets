priority 1

snippet imp-basic "Import basic scripting modules" b
import os
import sys
import shutil
endsnippet

snippet forr "forrange" w
for ${1:i} in range($2):
	$0
endsnippet

snippet os " import os " b
import os
endsnippet

snippet sys " import sys " b
import sys
endsnippet

snippet re " import re " b
import re
endsnippet

snippet np " import numpy " b
import numpy as np
endsnippet

snippet get "Get" w
urllib.request.urlopen(${1:url}).read().decode('utf-8')
endsnippet

snippet logConfig "Logging configuration" b
logging.basicConfig(${1:filename="", }level=${2:logging.${3:DEBUG}})
endsnippet

snippet dirname "Bash dirname" w
os.path.dirname(${1:${VISUAL}})$0
endsnippet

snippet "log([ewdi])" "Logging" r
`!p
level = match.group(1)
if level == "e":
	t[2] = "error"
elif level == "i":
	t[2] = "info"
elif level == "d":
	t[2] = "debug"
elif level == "w":
	t[2] = "warning"
`${1:logging}.$2(${3:"${4:something}"})
endsnippet

snippet check-version "Check python version code block" b
import sys
if sys.version_info < (${1:major_number}, ${2:minor_number}):
	raise Exception("This script must use python $1.$2 or greater")
	sys.exit(1)
endsnippet

snippet color-echos "Description" b
def header(msg):    print("\n\033[1m"+str(msg)+"\033[0m")
def success(msg):   print(" \033[1;32m==>\033[0m  "+str(msg))
def error(msg):     print(" \033[1;31mX\033[0m  "+str(msg))
def arrow(msg):     print(" \033[1;34m==>\033[0m  "+str(msg))
def warning(msg):   print(" \033[0;93m==>\033[0m  "+str(msg))
endsnippet



snippet subparser "Add a subparser to your cli" b
SUBPARSER_HELP="For further information for every command, type in '${1:your_progamn_name} <command> -h'"
subparsers = parser.add_subparsers(help=SUBPARSER_HELP, metavar="command", dest="command")

${2:command}_parser = subparsers.add_parser("${3:$2}", help="${4:Do $2}")

$2_parser.add_argument("-f", help="Input file.", action="store")
endsnippet

snippet arg-verbose "Add verbose to parser" b
${1:parser}.add_argument("-v", "--verbose", help="Make the output verbose", action="store_true")
endsnippet

snippet arg-optional "Add optional argument" b
${1:parser}.add_argument("-${2:f}"${2:, "--${3:long-name}"}, help="${4:Do some stuff}", action="${5:store_true}")
endsnippet

snippet arg-positional "Add positional argument" b
${1:parser}.add_argument("${2:name}", help="${3:Do some stuff}", action="${4:store}")
endsnippet

snippet is_windows "check if is windows" b
if os.name == "nt":
	${1:pass}
endsnippet


snippet configparser "Configuration parser" b
class Configuration(configparser.ConfigParser):

	default_info={
		"general": {
			'dir' : '~/.led'
		},
		"led-general": {
			'file' : 'general.led'
		}
	}

	DEFAULT_FILE_LOCATION= os.path.join(os.path.expanduser("~"), ".${1:name}.conf")
	def __init__(self):
		configparser.ConfigParser.__init__(self)
		self.initialize()
	def initialize(self):
		if os.path.exists(self.DEFAULT_FILE_LOCATION):
			self.read(self.DEFAULT_FILE_LOCATION)
		else:
			for section in self.default_info:
				self[section] = {}
				for field in self.default_info[section]:
					self[section][field] = self.default_info[section][field]
			with open(self.DEFAULT_FILE_LOCATION, "w") as configfile:
				self.write(configfile)
endsnippet






################
#  matplotlib  #
################



snippet vline "Vline" b
plt.axvline(${1:x}, color="r")
endsnippet

snippet hline "hline" b
plt.axhline(${1:y}, color="r")
endsnippet

snippet pltimp "import" b
import matplotlib.pyplot as plt
endsnippet

snippet plt "" b
plt.plot($1, $2)
endsnippet

snippet pltxlab "" b
plt.xlabel($1)
endsnippet

snippet pltylab "" b
plt.ylabel($1)
endsnippet

snippet pltlegend "legend" b
plt.legend($1)
endsnippet







snippet exists "If a path exists" i
os.path.exists(${1:"${2:path}"})
endsnippet

############
#  SPHINX  #
############
snippet sph-param "Sphinx parameter" b
:param ${1:parameter_name}: ${2:Description}
:type  $1: ${3:parameter_type}
endsnippet

snippet sph-returns "Sphinx returns" b
:returns: ${1:Description}
${2::rtype:  ${3:return_type}}
endsnippet




#############
#  Classes  #
#############

snippet defxet "Setter and getter definition" b
def set${1:Name}(self${2:, ${3:args}}):
	pass
def get$1(self$2):
	pass
endsnippet


snippet la "Latex print" w
print(
r"""
${1:${VISUAL}}
"""
)
endsnippet

snippet tla "Latex with template" w
print(string.Template(
r"""

""").substitute(
	)
)
endsnippet

###################
#  General stuff  #
###################

#snippet "im(port)?(\S+)" "Description" r
#import ${1:`!p
#snip.rv = match.group(2)
#`}
#endsnippet




snippet vimrun-ipy "Vim-run code snippet" b
#vim-run: ipython -i %
endsnippet

snippet vimrun "Vim-run code snippet" b
#vim-run: python %
endsnippet
