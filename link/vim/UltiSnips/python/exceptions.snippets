
################
#  EXceptions  #
################

snippet ex-AssertionError "AssertionError" b
raise AssertionError(${1:"${2:Exception text}"})$0
endsnippet
#    Raised when an assert statement fails.
snippet ex-AttributeError "AttributeError" b
raise AttributeError(${1:"${2:Exception text}"})$0
endsnippet
#     Raised when an attribute reference (see Attribute references) or assignment fails. (When an object does not support attribute references or attribute assignments at all, TypeError is raised.)
snippet ex-EOFError "EOFError" b
raise EOFError(${1:"${2:Exception text}"})$0
endsnippet
#     Raised when one of the built-in functions (input() or raw_input()) hits an end-of-file condition (EOF) without reading any data. (N.B.: the file.read() and file.readline() methods return an empty string when they hit EOF.)
snippet ex-FloatingPointError "FloatingPointError" b
raise FloatingPointError(${1:"${2:Exception text}"})$0
endsnippet
#     Raised when a floating point operation fails. This exception is always defined, but can only be raised when Python is configured with the --with-fpectl option, or the WANT_SIGFPE_HANDLER symbol is defined in the pyconfig.h file.
snippet ex-GeneratorExit "GeneratorExit" b
raise GeneratorExit(${1:"${2:Exception text}"})$0
endsnippet
#     Raised when a generator‘s close() method is called. It directly inherits from BaseException instead of StandardError since it is technically not an error.
#     New in version 2.5.
#     Changed in version 2.6: Changed to inherit from BaseException.
snippet ex-IOError "IOError" b
raise IOError(${1:"${2:Exception text}"})$0
endsnippet
#     Raised when an I/O operation (such as a print statement, the built-in open() function or a method of a file object) fails for an I/O-related reason, e.g., “file not found” or “disk full”.
#     This class is derived from EnvironmentError. See the discussion above for more information on exception instance attributes.
#     Changed in version 2.6: Changed socket.error to use this as a base class.
snippet ex-ImportError "ImportError" b
raise ImportError(${1:"${2:Exception text}"})$0
endsnippet
#     Raised when an import statement fails to find the module definition or when a from ... import fails to find a name that is to be imported.
snippet ex-IndexError "IndexError" b
raise IndexError(${1:"${2:Exception text}"})$0
endsnippet
#     Raised when a sequence subscript is out of range. (Slice indices are silently truncated to fall in the allowed range; if an index is not a plain integer, TypeError is raised.)
snippet ex-KeyError "KeyError" b
raise KeyError(${1:"${2:Exception text}"})$0
endsnippet
#     Raised when a mapping (dictionary) key is not found in the set of existing keys.
snippet ex-KeyboardInterrupt "KeyboardInterrupt" b
raise KeyboardInterrupt(${1:"${2:Exception text}"})$0
endsnippet
#     Raised when the user hits the interrupt key (normally Control-C or Delete). During execution, a check for interrupts is made regularly. Interrupts typed when a built-in function input() or raw_input() is waiting for input also raise this exception. The exception inherits from BaseException so as to not be accidentally caught by code that catches Exception and thus prevent the interpreter from exiting.
#     Changed in version 2.5: Changed to inherit from BaseException.
snippet ex-MemoryError "MemoryError" b
raise MemoryError(${1:"${2:Exception text}"})$0
endsnippet
#     Raised when an operation runs out of memory but the situation may still be rescued (by deleting some objects). The associated value is a string indicating what kind of (internal) operation ran out of memory. Note that because of the underlying memory management architecture (C’s malloc() function), the interpreter may not always be able to completely recover from this situation; it nevertheless raises an exception so that a stack traceback can be printed, in case a run-away program was the cause.
snippet ex-NameError "NameError" b
raise NameError(${1:"${2:Exception text}"})$0
endsnippet
#     Raised when a local or global name is not found. This applies only to unqualified names. The associated value is an error message that includes the name that could not be found.
snippet ex-NotImplementedError "NotImplementedError" b
raise NotImplementedError(${1:"${2:Exception text}"})$0
endsnippet
#     This exception is derived from RuntimeError. In user defined base classes, abstract methods should raise this exception when they require derived classes to override the method.
#     New in version 1.5.2.
snippet ex-OSError "OSError" b
raise OSError(${1:"${2:Exception text}"})$0
endsnippet
#     This exception is derived from EnvironmentError. It is raised when a function returns a system-related error (not for illegal argument types or other incidental errors). The errno attribute is a numeric error code from errno, and the strerror attribute is the corresponding string, as would be printed by the C function perror(). See the module errno, which contains names for the error codes defined by the underlying operating system.
#     For exceptions that involve a file system path (such as chdir() or unlink()), the exception instance will contain a third attribute, filename, which is the file name passed to the function.
#     New in version 1.5.2.
snippet ex-OverflowError "OverflowError" b
raise OverflowError(${1:"${2:Exception text}"})$0
endsnippet
#     Raised when the result of an arithmetic operation is too large to be represented. This cannot occur for long integers (which would rather raise MemoryError than give up) and for most operations with plain integers, which return a long integer instead. Because of the lack of standardization of floating point exception handling in C, most floating point operations also aren’t checked.
snippet ex-ReferenceError "ReferenceError" b
raise ReferenceError(${1:"${2:Exception text}"})$0
endsnippet
#     This exception is raised when a weak reference proxy, created by the weakref.proxy() function, is used to access an attribute of the referent after it has been garbage collected. For more information on weak references, see the weakref module.
#     New in version 2.2: Previously known as the weakref.ReferenceError exception.
snippet ex-RuntimeError "RuntimeError" b
raise RuntimeError(${1:"${2:Exception text}"})$0
endsnippet
#     Raised when an error is detected that doesn’t fall in any of the other categories. The associated value is a string indicating what precisely went wrong.
snippet ex-StopIteration "StopIteration" b
raise StopIteration(${1:"${2:Exception text}"})$0
endsnippet
#     Raised by an iterator‘s next() method to signal that there are no further values. This is derived from Exception rather than StandardError, since this is not considered an error in its normal application.
#     New in version 2.2.
snippet ex-SyntaxError "SyntaxError" b
raise SyntaxError(${1:"${2:Exception text}"})$0
endsnippet
#     Raised when the parser encounters a syntax error. This may occur in an import statement, in an exec statement, in a call to the built-in function eval() or input(), or when reading the initial script or standard input (also interactively).
#     Instances of this class have attributes filename, lineno, offset and text for easier access to the details. str() of the exception instance returns only the message.
snippet ex-IndentationError "IndentationError" b
raise IndentationError(${1:"${2:Exception text}"})$0
endsnippet
#     Base class for syntax errors related to incorrect indentation. This is a subclass of SyntaxError.
snippet ex-TabError "TabError" b
raise TabError(${1:"${2:Exception text}"})$0
endsnippet
#     Raised when indentation contains an inconsistent use of tabs and spaces. This is a subclass of IndentationError.
snippet ex-SystemError "SystemError" b
raise SystemError(${1:"${2:Exception text}"})$0
endsnippet
#     Raised when the interpreter finds an internal error, but the situation does not look so serious to cause it to abandon all hope. The associated value is a string indicating what went wrong (in low-level terms).
#     You should report this to the author or maintainer of your Python interpreter. Be sure to report the version of the Python interpreter (sys.version; it is also printed at the start of an interactive Python session), the exact error message (the exception’s associated value) and if possible the source of the program that triggered the error.
snippet ex-SystemExit "SystemExit" b
raise SystemExit(${1:"${2:Exception text}"})$0
endsnippet
#     This exception is raised by the sys.exit() function. When it is not handled, the Python interpreter exits; no stack traceback is printed. If the associated value is a plain integer, it specifies the system exit status (passed to C’s exit() function); if it is None, the exit status is zero; if it has another type (such as a string), the object’s value is printed and the exit status is one.
#     Instances have an attribute code which is set to the proposed exit status or error message (defaulting to None). Also, this exception derives directly from BaseException and not StandardError, since it is not technically an error.
#     A call to sys.exit() is translated into an exception so that clean-up handlers (finally clauses of try statements) can be executed, and so that a debugger can execute a script without running the risk of losing control. The os._exit() function can be used if it is absolutely positively necessary to exit immediately (for example, in the child process after a call to os.fork()).
#     The exception inherits from BaseException instead of StandardError or Exception so that it is not accidentally caught by code that catches Exception. This allows the exception to properly propagate up and cause the interpreter to exit.
#     Changed in version 2.5: Changed to inherit from BaseException.
snippet ex-TypeError "TypeError" b
raise TypeError(${1:"${2:Exception text}"})$0
endsnippet
#     Raised when an operation or function is applied to an object of inappropriate type. The associated value is a string giving details about the type mismatch.
snippet ex-UnboundLocalError "UnboundLocalError" b
raise UnboundLocalError(${1:"${2:Exception text}"})$0
endsnippet
#     Raised when a reference is made to a local variable in a function or method, but no value has been bound to that variable. This is a subclass of NameError.
#     New in version 2.0.
snippet ex-UnicodeError "UnicodeError" b
raise UnicodeError(${1:"${2:Exception text}"})$0
endsnippet
#     Raised when a Unicode-related encoding or decoding error occurs. It is a subclass of ValueError.
#     UnicodeError has attributes that describe the encoding or decoding error. For example, err.object[err.start:err.end] gives the particular invalid input that the codec failed on.
#     encoding
#         The name of the encoding that raised the error.
#     reason
#         A string describing the specific codec error.
#     object
#         The object the codec was attempting to encode or decode.
#     start
#         The first index of invalid data in object.
#     end
#         The index after the last invalid data in object.
#     New in version 2.0.
snippet ex-UnicodeEncodeError "UnicodeEncodeError" b
raise UnicodeEncodeError(${1:"${2:Exception text}"})$0
endsnippet
#     Raised when a Unicode-related error occurs during encoding. It is a subclass of UnicodeError.
#     New in version 2.3.
snippet ex-UnicodeDecodeError "UnicodeDecodeError" b
raise UnicodeDecodeError(${1:"${2:Exception text}"})$0
endsnippet
#     Raised when a Unicode-related error occurs during decoding. It is a subclass of UnicodeError.
#     New in version 2.3.
snippet ex-UnicodeTranslateError "UnicodeTranslateError" b
raise UnicodeTranslateError(${1:"${2:Exception text}"})$0
endsnippet
#     Raised when a Unicode-related error occurs during translating. It is a subclass of UnicodeError.
#     New in version 2.3.
snippet ex-ValueError "ValueError" b
raise ValueError(${1:"${2:Exception text}"})$0
endsnippet
#     Raised when a built-in operation or function receives an argument that has the right type but an inappropriate value, and the situation is not described by a more precise exception such as IndexError.
snippet ex-VMSError "VMSError" b
raise VMSError(${1:"${2:Exception text}"})$0
endsnippet
#     Only available on VMS. Raised when a VMS-specific error occurs.
snippet ex-WindowsError "WindowsError" b
raise WindowsError(${1:"${2:Exception text}"})$0
endsnippet
#     Raised when a Windows-specific error occurs or when the error number does not correspond to an errno value. The winerror and strerror values are created from the return values of the GetLastError() and FormatMessage() functions from the Windows Platform API. The errno value maps the winerror value to corresponding errno.h values. This is a subclass of OSError.
#     New in version 2.0.
#     Changed in version 2.5: Previous versions put the GetLastError() codes into errno.
snippet ex-ZeroDivisionError "ZeroDivisionError" b
raise ZeroDivisionError(${1:"${2:Exception text}"})$0
endsnippet
#     Raised when the second argument of a division or modulo operation is zero. The associated value is a string indicating the type of the operands and the operation.
# The following exceptions are used as warning categories; see the warnings module for more information.
snippet ex-Warning "Warning" b
raise Warning(${1:"${2:Exception text}"})$0
endsnippet
#     Base class for warning categories.
snippet ex-UserWarning "UserWarning" b
raise UserWarning(${1:"${2:Exception text}"})$0
endsnippet
#     Base class for warnings generated by user code.
snippet ex-DeprecationWarning "DeprecationWarning" b
raise DeprecationWarning(${1:"${2:Exception text}"})$0
endsnippet
#     Base class for warnings about deprecated features.
snippet ex-PendingDeprecationWarning "PendingDeprecationWarning" b
raise PendingDeprecationWarning(${1:"${2:Exception text}"})$0
endsnippet
#     Base class for warnings about features which will be deprecated in the future.
snippet ex-SyntaxWarning "SyntaxWarning" b
raise SyntaxWarning(${1:"${2:Exception text}"})$0
endsnippet
#     Base class for warnings about dubious syntax.
snippet ex-RuntimeWarning "RuntimeWarning" b
raise RuntimeWarning(${1:"${2:Exception text}"})$0
endsnippet
#     Base class for warnings about dubious runtime behavior.
snippet ex-FutureWarning "FutureWarning" b
raise FutureWarning(${1:"${2:Exception text}"})$0
endsnippet
#     Base class for warnings about constructs that will change semantically in the future.
snippet ex-ImportWarning "ImportWarning" b
raise ImportWarning(${1:"${2:Exception text}"})$0
endsnippet
#     Base class for warnings about probable mistakes in module imports.
#     New in version 2.5.
snippet ex-UnicodeWarning "UnicodeWarning" b
raise UnicodeWarning(${1:"${2:Exception text}"})$0
endsnippet
#     Base class for warnings related to Unicode
