

### TYPES {{{1


snippet fun "Simple function definition" b
def ${1:function_name}${2:(${3:*args})}
	$0
end
endsnippet
snippet lambda "Lambda expression" b
lambda { |${1:args}| ${0} }
endsnippet
snippet class "Class definition" b
class ${1:ClassName} < ${2:ParentClass}
	def initialize(${3:args})
		${0}
	end
end
endsnippet
snippet met "Method of a class" b
def self.${1:class_method_name}
	${0}
end
endsnippet
#snippet attr "Attribute of a class" b
#endsnippet
#snippet const "Readonly variale" b
#endsnippet
#snippet macro "C-like macro" b
#endsnippet
#snippet int "Simple integer definition" b
#endsnippet
#snippet float "Simple floating point definition" b
#endsnippet
#snippet double "Double precission" b
#endsnippet
#snippet char "Character definition" b
#endsnippet
#snippet str "String definition" b
#endsnippet
snippet dic "Relational array" b
Hash.new { |${1:hash}, ${2:key}| $1[$2] = ${0} }
endsnippet
snippet arr "List of values" b
Array.new(${1:10}) { |${2:i}| ${0} }
endsnippet
#snippet pointer "Pointer-like variable" b
#endsnippet
#snippet reference "Reference-like variable" b
#endsnippet
#snippet enum "Enumeration definition" b
#endsnippet
#snippet struct "Structure construct" b
#endsnippet
#snippet type "Define custom type" b
#endsnippet
#snippet bin "Binary numbers" b
#endsnippet
#snippet hex "Hexadecimal numbers" b
#endsnippet
#snippet octal "Octal numbers" b
#endsnippet
#snippet bool "Boolean variables" b
#endsnippet
#snippet name "Namespace" b
#endsnippet
snippet module "Define module, package etc.." b
module ${1:ModuleName}
	${0}
end
endsnippet
#snippet c<TYPE> "Constant type definition" b
#endsnippet
#snippet t<TYPE> "Type safe definition" b
#endsnippet
#snippet ct<TYPE> "Constant type safe definition" b
#endsnippet
#snippet a<TYPE> "Array 1D type definition" b
#endsnippet
#snippet ca<TYPE> "Array 1D type definition" b
#endsnippet


### BRANCHING {{{1


snippet if "If construct" 
if ${1:condition}
	${0}
end
endsnippet
snippet ife "If else construct" b
if ${1:condition}
	${2}
else
	${0}
end
endsnippet
snippet elif "Else if construct" b
elsif ${1:condition}
	${0}
endsnippet
snippet else "Just else" b
else
	${0}
endsnippet
#snippet ifsh "If construct, short form" b
#endsnippet
#snippet if3 "If construct tertiary form" b
#endsnippet
#snippet for "For with index" b
#endsnippet
snippet fori "For in iterator form" b
for ${1:e} in ${2:c}
	${0}
end
endsnippet
#snippet ford "For in dictionary/table form" b
#endsnippet
snippet while "While loop" b
while ${1:condition}
	${0}
end
endsnippet
snippet until "Until loop" b
until ${1:condition}
	${0}
end
endsnippet
snippet case "Case construct" b
case ${1:object}
when ${2:condition}
	${0}
end
endsnippet
snippet try "Try/catch" b
begin
	${0}
rescue ${1:Exception} => ${2:e}
end
endsnippet
#snippet ifm "If regex match" b
#endsnippet


### UTILS {{{1


#snippet new "Instantiate object" b
#endsnippet
snippet pac "Include some package" b
require '${1}'
endsnippet
snippet so "Print to stdout" b
puts ${1:"${2:something}"}
endsnippet
#snippet serr "Print to stderr" b
#endsnippet
#snippet sex "Raise exception" b
#endsnippet
#snippet sof "Printf to stdout (formated)" b
#endsnippet
#snippet read "Stdin read" b
#endsnippet
#snippet cd "Change dir" b
#endsnippet
snippet ls "List directory" b
Dir.glob(${1:'dir/glob/*'}) { |${2:file}| ${0} }
endsnippet
#snippet sys "Talk to the shell" b
#endsnippet
#snippet mkdir "Create directory" b
#endsnippet
#snippet cp "Copy a file" b
#endsnippet
#snippet cpr "Copy dir" b
#endsnippet
snippet fopen "File open" b
open('${1:path/or/url/or/pipe}', '${2:w}') { |${3:io}| ${0} }
endsnippet
#snippet fclose "File open" b
#endsnippet
#snippet fwrite "File write" b
#endsnippet
snippet fread "File read" b
File.read(${1:'path/to/file'})
endsnippet
#snippet exit "Exit a program with status" b
#endsnippet
#snippet ret "Return a value in function" b
#endsnippet
#snippet argc "Get arguments number" b
#endsnippet
#snippet argvi "Get ith argument" b
#endsnippet
snippet match "Regex match" w
${1:'${2:some string}'}.match(${3:'${4:regex}'})
endsnippet
#snippet sizeof "Get size of variables or types" b
#endsnippet
#snippet basename "Bash basename" b
#endsnippet
snippet genv "Get Environment variables" b
ENV[${1:'${2:NAME}'}]
endsnippet
#snippet senv "Set Environment variables" b
#endsnippet
#snippet clear "stdout clear" b
#endsnippet
#snippet sleep "Sleep for some time" b
#endsnippet
snippet shbang "Shbang for some scripting languages" b
#!/usr/bin/env ruby
# encoding: UTF-8
$0
endsnippet
#snippet slurp "Slurp, read a whole file at once" b
#endsnippet


### CONSTANTS {{{1


#snippet true "True variable" b
#endsnippet
#snippet false "False keyword" b
#endsnippet
#snippet and "And operator" b
#endsnippet
#snippet or "Or operator" b
#endsnippet
#snippet bor "Bitwise or" b
#endsnippet
#snippet band "Bitwise and" b
#endsnippet
#snippet nan "Not a number" b
#endsnippet
#snippet null "Undefined variable" b
#endsnippet
#snippet eof "End of file character" b
#endsnippet


### TEMPLATES {{{1


snippet argv-parse "Parse command line" b
require 'optparse'

options = { ${0:default: 'args'} }

ARGV.options do |opts|
	opts.banner = "Usage: #{File.basename($PROGRAM_NAME)}"
	opts.on('-${1:o}', '--${2:long-option-name}', ${3:String}, '${4:Option description.}') do |${5:opt}|
		${0}
	end
end
endsnippet
snippet main "Main template" b
if __FILE__ == $PROGRAM_NAME
	${0}
end
endsnippet
