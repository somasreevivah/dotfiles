

### TYPES {{{1


snippet fun "Simple function definition" b
sub ${1:function_name} {
	${2:# body...}
}
endsnippet
#snippet lambda "Lambda expression" b
#endsnippet
snippet class "Class definition" b
package ${1:ClassName};

${2:use parent qw(${3:ParentClass});}${2/.+/\n\n/}sub new {
	my $class = shift;
	$class = ref $class if ref $class;
	my $self = bless {}, $class;
	$self;
}
endsnippet
#snippet met "Method of a class" b
#endsnippet
#snippet attr "Attribute of a class" b
#endsnippet
#snippet const "Readonly variale" b
#endsnippet
#snippet macro "C-like macro" b
#endsnippet
snippet int "Simple integer definition" b
my \$${1:varname} = ${2:42};
endsnippet
snippet float "Simple floating point definition" b
my \$${1:varname} = ${2:42.0};
endsnippet
snippet double "Double precission" b
my \$${1:varname} = ${2:42.0};
endsnippet
snippet char "Character definition" b
my \$${1:varname} = "${2:t}";
endsnippet
snippet str "String definition" b
my \$${1:varname} = "${2:text}";
endsnippet
snippet dic "Relational array" b
my %${1:varname} = {
	${2:key => "value",}
};
endsnippet
snippet arr "List of values" b
my @${1:varname} = (${2:3,4,5});
endsnippet
#snippet pointer "Pointer-like variable" b
#endsnippet
#snippet reference "Reference-like variable" b
#endsnippet
#snippet enum "Enumeration definition" b
#endsnippet
#snippet struct "Structure construct" b
#endsnippet
#snippet type "Define custom type" b
#endsnippet
#snippet bin "Binary numbers" b
#endsnippet
#snippet hex "Hexadecimal numbers" b
#endsnippet
#snippet octal "Octal numbers" b
#endsnippet
#snippet bool "Boolean variables" b
#endsnippet
#snippet name "Namespace" b
#endsnippet
#snippet module "Define module, package etc.." b
#endsnippet
#snippet c<TYPE> "Constant type definition" b
#endsnippet
#snippet t<TYPE> "Type safe definition" b
#endsnippet
#snippet ct<TYPE> "Constant type safe definition" b
#endsnippet
#snippet a<TYPE> "Array 1D type definition" b
#endsnippet
#snippet ca<TYPE> "Array 1D type definition" b
#endsnippet


### BRANCHING {{{1


snippet if "If construct" b
if ($1) {
	${2:# body...}
}
endsnippet
snippet ife "If else construct" b
if ($1) {
	${2:# body...}
}
else {
	${3:# else...}
}

endsnippet

snippet elif "Else if construct" b
elsif ($3) {
	${4:# elsif...}
}
endsnippet
snippet ifsh "If construct, short form" b
${1:expression} if ${2:condition};
endsnippet
#snippet if3 "If construct tertiary form" b
#endsnippet
snippet for "For with index" b
for (my $${1:var} = 0; $$1 < ${2:expression}; $$1++) {
	${3:# body...}
}
endsnippet
snippet fori "For in iterator form" b
foreach ${1:my $${2:x}} (@${3:array}) {
	${4:# body...}
}
endsnippet
snippet ford "For in dictionary/table form" b
foreach my $${1:key} (keys %${2:hash}) {
	${3:print "The value of $1 is $2{$1}\n";}
}
endsnippet
snippet while "While loop" b
while ($1) {
	${2:# body...}
}
endsnippet
snippet until "Until loop" b
until ($1) {
	${2:# body...}
}
endsnippet
#snippet case "Case construct" b
#endsnippet
#snippet try "Try/catch" b
#endsnippet
#snippet ifm "If regex match" b
#endsnippet


### UTILS {{{1


#snippet new "Instantiate object" b
#endsnippet
#snippet pac "Include some package" b
#endsnippet
snippet so "Print to stdout" b
print ${1:"${2:text}"};$0
endsnippet
snippet serr "Print to stderr" b
print STDERR ${1:"${2:text}"};$0
endsnippet
snippet sex "Raise exception" b
die ${1:"${2:error..}"};$0
endsnippet
#snippet sof "Printf to stdout (formated)" b
#endsnippet
#snippet read "Stdin read" b
#endsnippet
#snippet cd "Change dir" b
#endsnippet
#snippet ls "List directory" b
#endsnippet
#snippet sys "Talk to the shell" b
#endsnippet
#snippet mkdir "Create directory" b
#endsnippet
#snippet cp "Copy a file" b
#endsnippet
#snippet cpr "Copy dir" b
#endsnippet
snippet fopen "File open" b
open(my $fd, "${3:/</>/>>}",  "${2:output.txt}") or die "Can't open $2: $!";
endsnippet
snippet fclose "File open" b
close $${1:fd} or die "$1: $!";
endsnippet
snippet fwrite "File write" b
print $${1:fd} ${2:$${3:variable}};
endsnippet
snippet fread "File read" b
while (<$${1:fd}>) {
	my $${3:line}=$_
	${4: print "Just read in this line: $3"; }
}
endsnippet
snippet exit "Exit a program with status" b
exit ${1:1};
endsnippet
snippet ret "Return a value in function" b
return ${1:something};
endsnippet
#snippet argc "Get arguments number" b
#endsnippet
#snippet argvi "Get ith argument" b
#endsnippet
#snippet match "Regex match" b
#endsnippet
#snippet sizeof "Get size of variables or types" b
#endsnippet


### CONSTANTS {{{1


snippet true "True variable" i
1
endsnippet
snippet false "False keyword" i
0
endsnippet
snippet and "And operator" b
&&
endsnippet
snippet or "Or operator" b
||
endsnippet
#snippet bor "Bitwise or" b
#endsnippet
#snippet band "Bitwise and" b
#endsnippet
#snippet nan "Not a number" b
#endsnippet
snippet null "Undefined variable" i
undef
endsnippet
#snippet eof "End of file character" b
#endsnippet


### TEMPLATES {{{1


#snippet argv-parse "Parse command line" b
#endsnippet
#snippet main "Main template" b
#endsnippet
