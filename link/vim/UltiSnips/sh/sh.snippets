
snippet debug "Debug function" b
DEBUG=${1:1}
function echo_debug() { if [[ -n ${DEBUG} ]]; then echo -ne "\033[0;105mDEBUG::\033[0m "; echo $@ ; fi }
endsnippet

snippet scriptDir "Variable w script directory" b
${1:SCRIPT_DIR}=$(dirname \$0) $0
endsnippet

snippet $ "Variable" i
$\{${1:n}\}$0
endsnippet

snippet $$ "Variable" i
$(${1:n})$0
endsnippet

snippet $o "Variable optional" i
$\{${1:n}${3::-${2:Default}}\}$0
endsnippet

snippet confirm "Prompt for confirmation" b
read -p "${1:Are you sure?} (y/N)" -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
	# do dangerous stuff
fi
REPLY= # unset REPLY after using it
endsnippet

snippet select "Select loop" b
PS3="${1:Choice}"
select ${2:opt} in ${3:\$some_options}; do
	${4:echo "You have selected \$$2"}
done
endsnippet


snippet color-echos "Some color echos to locally use in scripts" b
function header()   { echo -e "\n\033[1m$@\033[0m"; }
function success()  { echo -e " \033[1;32m==>\033[0m  $@"; }
function error()    { echo -e " \033[1;31mX\033[0m  $@"; }
function arrow()    { echo -e " \033[1;34m==>\033[0m  $@"; }
function warning()  { echo -e " \033[0;93m==>\033[0m  $@"; }
endsnippet

snippet vimrun "Vim-run code snippet" b
#vim-run: bash %$0
endsnippet
# int
########

snippet tint "Definition of int type safely" b
declare -i ${1:variable_name}=${2:42}
endsnippet
snippet cint "Definition of constants of int type" b
declare -r -i ${1:variable_name}=${2:42}
endsnippet
snippet aint "Definition of one dimensional array of int type" b
${1:variable_name}=${2:(1 2 3 4 5)}
endsnippet

# float
########

snippet tfloat "Definition of float type safely" b
declare -x ${1:variable_name}${2:=${3:3.14}}
endsnippet
snippet cfloat "Definition of constants of float type" b
declare -x -r ${1:variable_name}${2:=${3:3.14}}
endsnippet
snippet afloat "Definition of one dimensional array of float type" b
declare -x -r ${1:variable_name}${2:=${3:(3.14 3.14 3.14 3.14 3.14)}}
endsnippet

# str
########

snippet tstr "Definition of str type safely" b
declare -x ${1:variable_name}${2:=${3:a}}
endsnippet
snippet cstr "Definition of constants of str type" b
declare -x -r ${1:variable_name}${2:=${3:a}}
endsnippet
snippet astr "Definition of one dimensional array of str type" b
declare -x -r ${1:variable_name}${2:=${3:(a b c d e)}}
endsnippet


# char
########

snippet tchar "Definition of char type safely" b
declare -x ${1:variable_name}${2:=${3:a}}
endsnippet
snippet cchar "Definition of constants of char type" b
declare -x -r ${1:variable_name}${2:=${3:a}}
endsnippet
snippet achar "Definition of one dimensional array of char type" b
declare -x -r ${1:variable_name}${2:=${3:(a b c d e)}}
endsnippet



# arr
########

snippet tarr "Definition of arr type safely" b
declare -a ${1:variable_name}${2:=${3:(hello world array)}}
endsnippet
snippet carr "Definition of constants of arr type" b
declare -a -r ${1:variable_name}${2:=${3:(hello world array)}}
endsnippet


# fun
########

snippet tfun "Definition of fun type safely" b
declare -f function ${1:function_name}() {
	${0:#function_body}
}
endsnippet
snippet cfun "Definition of constants of fun type" b
declare -f -r function ${1:function_name}() {
	${0:#function_body}
}
endsnippet
















snippet not "not operator" i
!
endsnippet

