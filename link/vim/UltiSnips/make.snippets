
snippet base "Base makefile"
CC=clang++
CFLAGS=-Wall -Wextra -Wno-unused-parameter -stdlib=libc++ -std=c++11
CINCLUDE=-I/usr/local/include -L/usr/local/lib
CLIBS=-lArtemisCpp -lsfml-graphics -lsfml-window -lsfml-system

BIN=bin/${1:Executable}

CMD=\$(CC) \$(CFLAGS) \$(CINCLUDE) \$(CLIBS) -o \$(BIN)${1:Executable}

########################################################################

$0

clean:
	rm -rf \$(BIN)${1:Executable}
endsnippet

snippet : "Make rule"
${1:target}: ${2:deps}
	$0
endsnippet

snippet $ "Get a variable" i
$(${1:VAR_NAME})$0
endsnippet

snippet for "Embedded shell for" b
	@for ${1:variable} in ${2:container}; do \
		${3:Body}; \
	done
endsnippet

snippet ife "Bash if else" b
	@if ${1:Cond}; then \
		${2:#Body}; \
	else \
		${3:#Body}; \
	fi
endsnippet

snippet else "Bash else" b
	@if ${1:Cond}; then \
		${3:#Body}; \
	fi
endsnippet

snippet if "Bash if" b
	@if ${1:Cond}; then \
		${3:#Body}; \
	fi
endsnippet

snippet so "Stdout" b
@echo $1
endsnippet

snippet vimrun "vim run" b
# vim-run: make all
endsnippet

snippet modeline "Modeline" b
# vim: nospell fdm=marker
endsnippet

snippet target "File to be made" w
$<
endsnippet

snippet source "File the target depends on" w
$@
endsnippet

snippet info-var "Information about normally used shortcurs" b
# make info {{{ #
################################################################
# $@  the name of the file to be ``made''
# $?  the set of dependent names that are younger than the target
# $<  the name of the related file that caused the action (the precursor to the target) - this is only for suffix rules
# $*  the shared prefix of the target and dependent - only for suffix rules
# $$  escapes macro substitution, returns a single ``$''.
################################################################
# }}} make info #
endsnippet
