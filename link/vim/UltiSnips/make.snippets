
snippet base "Base makefile"
CC=clang++
CFLAGS=-Wall -Wextra -Wno-unused-parameter -stdlib=libc++ -std=c++11
CINCLUDE=-I/usr/local/include -L/usr/local/lib
CLIBS=-lArtemisCpp -lsfml-graphics -lsfml-window -lsfml-system

BIN=bin/${1:Executable}

CMD=\$(CC) \$(CFLAGS) \$(CINCLUDE) \$(CLIBS) -o \$(BIN)${1:Executable}

########################################################################

$0

clean:
	rm -rf \$(BIN)${1:Executable}
endsnippet

snippet : "Make rule"
${1:target}: ${2:deps}$0
endsnippet

snippet $ "Get a variable" i
$(${1:VAR_NAME})$0
endsnippet

snippet for "Embedded shell for" b
	@for ${1:variable} in ${2:container}; do \
		${3:Body}; \
	done
endsnippet

snippet if
ifeq (${1:cond0}, ${2:cond1})
	${0}
endif
endsnippet

snippet ife
ifeq (${1:cond0}, ${2:cond1})
	${3}
else
	${0}
endif
endsnippet
# else ...
snippet el
else
	${0}
endsnippet

snippet bife "Bash if else" b
	@if ${1:Cond}; then \
		${2:#Body}; \
	else \
		${3:#Body}; \
	fi
endsnippet

snippet belse "Bash else" b
	@if ${1:Cond}; then \
		${3:#Body}; \
	fi
endsnippet

snippet bif "Bash if" b
	@if ${1:Cond}; then \
		${3:#Body}; \
	fi
endsnippet

snippet so "Stdout" b
@echo $1
endsnippet

snippet vimrun "vim run" b
# vim-run: make all
endsnippet

snippet modeline "Modeline" b
# vim: nospell fdm=marker
endsnippet

snippet target "File to be made" w
$<
endsnippet

snippet source "File the target depends on" w
$@
endsnippet

# help target for self-documented Makefile
snippet help
help: ## Prints help for targets with comments
	@$(or $(AWK),awk) ' \
		BEGIN {FS = ":.*?## "}; \
		/^## *<<HELP/,/^## *HELP/ { \
			help=$\$1; \
			gsub("#","",help); \
			if (! match(help, "HELP")) \
				print help ; \
		}; \
		/^[a-zA-Z0-9_\-.]+:.*?## .*$$/{ \
			printf "\033[36m%-30s\033[0m %s\n", $\$1, $\$2 ; \
		};' \
		$(MAKEFILE_LIST)
${0}
endsnippet

snippet info "Information about normally used shortcurs" b
# make info {{{ #
################################################################
# $@  the name of the file to be ``made''
# $?  the set of dependent names that are younger than the target
# $<  the name of the related file that caused the action (the precursor to the target) - this is only for suffix rules
# $*  the shared prefix of the target and dependent - only for suffix rules
# $$  escapes macro substitution, returns a single ``$''.
################################################################
# }}} make info #
endsnippet

snippet info-pandoc "Info for pandoc" b
#  pandoc info {{{ # 
##################################################################
#json                (JSON version of native AST),
#plain               (plain text),
#markdown            (pandoc's extended markdown), mark-
#down_strict         (original  unextended  markdown),
#markdown_phpextra   (PHP Markdown extra extended markdown),
#markdown_github     (github extended  markdown),
#rst                 (reStructuredText),
#html                (XHTML 1),
#html5               (HTML 5),
#latex               (LaTeX),
#beamer              (LaTeX beamer slide show),
#context             (ConTeXt),
#man                 (groff  man),
#mediawiki           (MediaWiki markup),
#textile             (Textile),
#org                 (Emacs Org-Mode),
#texinfo             (GNU Texinfo),
#opml                (OPML),
#docbook             (DocBook),
#opendocument        (OpenDoc- ument),
#odt                 (OpenOffice text document),
#docx                (Word  docx),
#rtf                 (rich  text  format),
#epub                (EPUB v2 book),
#epub3               (EPUB v3),
#fb2                 (FictionBook2 e-book),
#asciidoc            (AsciiDoc),
#slidy               (Slidy  HTML and   javascript   slide  show),
#slideous            (Slideous  HTML  and javascript slide show),
#dzslides            (DZSlides  HTML5  +  javascript slide show),
#revealjs            (reveal.js HTML5 + javascript slide show),
#s5                  (S5 HTML and javascript slide show),
##################################################################
#  }}} pandoc info # 
endsnippet
