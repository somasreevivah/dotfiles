"  VUNDLE.VIM  {{{1"

set nocompatible
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
let g:vundle_default_git_proto = 'git'
call vundle#begin()

if ! exists("NO_SPARTAN")
  "Plugins that are not loaded 
  "when I want to be spartan
  "Plugin 'yuratomo/w3m.vim'
  Plugin 'vim-scripts/VCard-syntax'
  Plugin 'scrooloose/syntastic'
  Plugin 'dhruvasagar/vim-table-mode'
  Plugin 'kchmck/vim-coffee-script'
  Plugin 'burnettk/vim-angular'
  Plugin 'jpalardy/vim-slime'
endif
Plugin 'easymotion/vim-easymotion'
Plugin 'sirtaj/vim-openscad'
Plugin 'wilsaj/chuck.vim'
if has("lua") " it needs lua!
  "Plugin 'Shougo/neocomplete.vim'
endif
Plugin 'vim-scripts/OmniCppComplete'
if hostname() != "abakus01"
  Plugin 'vim-scripts/vim-auto-save'
endif
Plugin 'ledger/vim-ledger'
Plugin 'alejandrogallo/vim-syntax-extra'
Plugin 'othree/html5.vim'
Plugin 'lervag/vimtex'
Plugin 'derekwyatt/vim-fswitch'
Plugin 'majutsushi/tagbar'
Plugin 'godlygeek/tabular'
Plugin 'tpope/vim-fugitive'
Plugin 'vim-scripts/gnuplot.vim'
Plugin 'alejandrogallo/vasp.vim'
Plugin 'alejandrogallo/cc4s.vim'
Plugin 'antoniogsof/vim-molpro'
Plugin 'alejandrogallo/vim-spice'
Plugin 'alejandrogallo/vim-asymptote'
Plugin 'flazz/vim-colorschemes'
Plugin 'tpope/vim-surround'
Plugin 'ctrlpvim/ctrlp.vim'
"Plugin 'ervandew/supertab'
Plugin 'scrooloose/nerdcommenter'
if v:version >= 704
  "it needs vim 7.04..
  Plugin 'SirVer/ultisnips'
  Plugin 'honza/vim-snippets'
endif
Plugin 'JuliaEditorSupport/julia-vim'
Plugin 'rust-lang/rust.vim'
"Plugin 'mattn/emmet-vim'
" Track the engine.
Plugin 'VundleVim/Vundle.vim'
" All of your Plugins must be added before the following line
call vundle#end()




" GENERAL STUFF {{{1 "

" Dictionary
set dictionary-=/usr/share/dict/words
set dictionary+=/usr/share/dict/words

" vertical split default
let g:netrw_preview   = 1
let g:netrw_liststyle = 3
" 30% of column
let g:netrw_winsize   = 30
let g:netrw_browsex_viewer = "rifle" 


if exists("&colorcolumn")
  set cc=80
endif

function! AddToLookUpList()
  let word = expand("<cword>")
  exe("silent !echo '".word."' >> to_lookup")
  redraw!
  echo "Added ".word
endfunction

function! GoogleLookUp()
  let s:word = expand("<cword>")
  exec "!elinks 'g ".s:word."'"
endfunction

function! AutoCompleteParentheses()
  let symbs_begin = ["(", "{", "\"", "'", "["]
  let symbs_end = [")", "}", "\"", "'", "]"]
  let current_line = getline(".")
  let cursor_pos=getcurpos()
  let cursor_column=cursor_pos[2]
  "let c=0
  let c=cursor_column
  while c >=0
    let counter=0
    for s in symbs_begin
      if current_line[c] =~ s
        exec "normal! a".symbs_end[counter]
        return
      endif
      let counter+=1
    endfor
    let c-=1
  endwhile
endfunction


function! s:get_visual_selection()
  " Why is this not a built-in Vim script function?!
  " from
  " http://stackoverflow.com/questions/1533565/how-to-get-visually-selected-text-in-vimscript
  let [lnum1, col1] = getpos("'<")[1:2]
  let [lnum2, col2] = getpos("'>")[1:2]
  let lines = getline(lnum1, lnum2)
  let lines[-1] = lines[-1][: col2 - (&selection == 'inclusive' ? 1 : 2)]
  let lines[0] = lines[0][col1 - 1:]
  return join(lines, "\n")
endfunction

function! CopyFileLine()
  let @" = expand('%').":".getpos(".")[1]
endfunction

function! TabReplace()
  %s/\t/  /g
endfunction

function! TrailingSpacesClean()
  echom "Removing trailing spaces"
  %s/\v\s+$//g
endfunction

" set undo stuff, it needs VIM 7.3 at least but it will check for features
if has("persistent_undo")
  if exists('+undofile')
    set undofile
  endif
  if !isdirectory($HOME."/.vim/etc/undo")
    call mkdir($HOME."/.vim/etc/undo", "", 0700)
  endif
  set undodir=$HOME/.vim/etc/undo/
endif

" allowing modeline
set modeline

"No compatibility with vi
set nocompatible

" standart column 72 width
"set textwidth=72

"Go to normal mode typing  kj in insert mode
"inoremap kj <ESC>

filetype plugin on
"Autocompletion from vim

"Numbering of lines
set number

" Relative numbering
"if v:version >= 704
if exists("&relativenumber")
  "is only supported for vim 7.04 and above...
  "set relativenumber
endif


"Automatic indentation for plugins
filetype plugin indent on

"enable coloring and so on
syntax enable

"Highlight search as you type the searching word
set incsearch

"provide a graphical menu of all the matches you can cycle through in the command line
set wildmenu

" Marks for special characters
set listchars=eol:~,trail:*
set listchars+=tab:>\  "Tab should be ok like that
" Activate listchars
set list

" OmniCompletion {{{1 "

set tags+=~/.vim/commontags
set omnifunc=syntaxcomplete#Complete
set complete+=t

" GrepAndReplace {{{1 "

function! GrepAndReplace(word, ...)
  let folder = "."
  let word_replace = ""
  echom "Contents of the replacing list"
  echom "------------------------------"
  let i = 1
  for argument in a:000
    echom i
    if i == len(a:000)
      let word_replace = word_replace.argument
    else
      let word_replace = word_replace.argument." "
    endif
    let i+=1
    echom argument
  endfor
  let command = "grep -E \"".a:word."\" -R ".folder
  echom "Replacing... : ".a:word
  echom "By           : ".word_replace
  echom command
  call setqflist([])
  execute command
  let qflist = getqflist()
  for matchfl in qflist
    execute ".s/".a:word."/".word_replace."/gc"
    execute "write"
    execute "cnext"
    "try
    "execute "cnext"
    "catch
    "echom "No more items"
    "endtry
  endfor
endfunction

command! -nargs=* Greplace call GrepAndReplace(<f-args>)



" Leaders and mappings {{{1 "

"Set maplocalleader to something else if you like
let maplocalleader = "\<Space>"

"Set maplocalleader to something else if you like
", is a bad choice, since it repeats the latest f, t, F, or T see help cpo-;
let mapleader = '_'

"Save current buffer
nnoremap <localleader>w :w<cr>
"Close vim
nnoremap <localleader>q :q<cr>

set ignorecase
set smartcase

nnoremap <localleader>o :exec('!rifle '.expand('<cfile>'))<cr>
nnoremap <localleader>O :exec('!'.input("Open with: ").' '.expand('<cfile>'))<cr>

nnoremap j :echo 'Do not touch it'<cr>
nnoremap h :echo 'Do not touch it'<cr>
nnoremap k :echo 'Do not touch it'<cr>
nnoremap l :echo 'Do not touch it'<cr>

cnoremap <C-v> xclip -o
"inoremap <localleader><localleader>v <C-r>=system('xclip -o')<cr>


nnoremap <localleader>cd :cd %:p:h<cr>:pwd<cr>
command! -nargs=0 Xterm
      \ | execute ':silent !(xterm -e "cd %:p:h && bash" &)&'

" Toggle Tagbar
noremap <localleader>tg :TagbarToggle<cr>

"edit vimrc
nnoremap <localleader>V :edit $DOTFILES/link/vimrc<cr>

" edit bashrc
nnoremap <localleader>B :edit $DOTFILES/link/bashrc<cr>

" align stuff for =
vnoremap <localleader>t :Tabularize /

nnoremap <localleader><localleader>s :source $MYVIMRC<cr>

vnoremap <silent> <localleader>y y:new<CR>P:wq! ~/reg.txt<CR>
nnoremap <silent> <localleader>y yy:new<CR>P:wq! ~/reg.txt<CR>
noremap <silent> <localleader>p :r ~/reg.txt<CR>


" Folding stuff {{{1 "
nnoremap <localleader>zmm :set foldmethod=marker<cr>
nnoremap <localleader>zmi :set foldmethod=indent<cr>


"  Autocommands {{{1  "
"""""""""""""""""""""""
if has("autocmd")
    "autocmd !
  augroup Misc " {{{2
    autocmd!
    autocmd FileType tex,mail     set spell textwidth=80
    autocmd FileType asy,gnuplot  set nospell
  augroup END " }}}2
end


" Buffer control {{{1 "

"Change to next buffer
nnoremap <C-n> :bn<CR>

"Change to previous buffer
nnoremap <C-p> :bp<CR>

"Delete
nnoremap <localleader>d :bd<CR>

"Silent command not to see
"any output from the command and
"to redraw the screen afterwards
command! -nargs=1 Silent
      \ | execute ':silent !'.<q-args>
      \ | execute ':redraw!'

"Make shortcut
" First for general make
nnoremap <localleader>M :make 
" do a quick make mainly for latex stuff
nnoremap <localleader>m :Silent make<cr>
nnoremap <localleader>mt :make test<cr>




" Fswitch {{{1

if has("autocmd")

" For c++
au! BufEnter *.cpp,*.cxx,*.C let b:fswitchdst = 'hpp,h,hxx' | let b:fswitchlocs = '.' | nnoremap <localleader><localleader><Tab> :FSHere<cr>
au! BufEnter *.h,*.hpp let b:fswitchdst = 'cxx,cpp,C' | let b:fswitchlocs = '.' | nnoremap <localleader><localleader><Tab> :FSHere<cr>
"
" For c and fortran
au! BufEnter *.c,*.F,*.f90,*.f95,*.f77 let b:fswitchdst = 'h' | let b:fswitchlocs = '.' | nnoremap <localleader><localleader><Tab> :FSHere<cr>
au! BufEnter *.h let b:fswitchdst = 'c,F,f90,f95,f77' | let b:fswitchlocs = '.' | nnoremap <localleader><localleader><Tab> :FSHere<cr>

endif



"  ULTISNIPS STUFF  {{{1"
let g:UltiSnipsExpandTrigger="<C-j>"

let g:UltiSnipsJumpForwardTrigger="<C-j>"

let g:UltiSnipsJumpBackwardTrigger="<C-k>"

let g:UltiSnipsListSnippets="<c-l>"

let g:UltiSnipsEditSplit="vertical"

" edit ultisnips
nnoremap <localleader>ul :UltiSnipsEdit<cr>




"  TAB CONFIGURATION  {{{1"


"Set tabstop to tell vim how many columns a tab counts for
"(for syntax for example that use explicitly the tab character for linting)
set tabstop=2

"When expandtab is set, hitting Tab in insert mode will produce the appropriate number of spaces.
"(expand tab in spaces)
set expandtab

"Set shiftwidth to control how many columns text is indented with the reindent operations 
"(<< and >>)
set shiftwidth=2

"Set softtabstop to control how many columns vim uses when you hit Tab in insert mode
set softtabstop=2


" Windowing configuration {{{1 "

"split vertically like in i3
nnoremap <localleader><cr> :vsp<cr>
"split horizontally like in i3
nnoremap <localleader><localleader><cr> :sp<cr>

nnoremap <localleader>c :call AutoCompleteParentheses()<cr>
let g:WINDOW_IS_ZOOMED=0
function! ToggleWindowZoom()
  "a very simple and stupid function to maximize some windows, it messes
  "everything up, but I do not need much more for the moment
  if g:WINDOW_IS_ZOOMED==1
    exec "normal! \<C-w>="
    let g:WINDOW_IS_ZOOMED=0
  else
    "Resize height
    exec ":resize 400"
    "Resize width
    exec ":vertical resize 400"
    let g:WINDOW_IS_ZOOMED=1
  endif
endfunction
nnoremap <C-w>f :call ToggleWindowZoom()<cr>

" Contacts {{{1 "

let s:CONTACT_AUTOCOMPLETION=""
let s:CONTACT_FILE="~/contacts/contacts.header"
let g:CONTACT_COMMAND="~/contacts/bin/query"


"Nice and simple get all results
nnoremap <localleader>mmq :exec ".!".g:CONTACT_COMMAND." <cword> "<cr>
"get only first result
nnoremap <localleader>mq :exec ".!".g:CONTACT_COMMAND." <cword> \| head -1"<cr>


"  emmet.vim  {{{1"
"Remap emmet trigger jey ctrl + e (CTRL+EMMET)
"let g:user_emmet_leader_key='<C-e>'
"let g:user_emmet_leader_key='<C-k>'
"let g:user_emmet_leader_key='<localleader>e'



"  neocomplete.vim  {{{1"

" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_fuzzy_completion = 1



" Fugitive {{{1 "
nnoremap <localleader>gs :Gstatus
nnoremap <localleader>gw :Gwrite
nnoremap <localleader>gm :Gcommit
nnoremap <localleader>gma :Gcommit -a
nnoremap <localleader>gp :Gpush
nnoremap <localleader>gu :Gpull




"  CtrlP  {{{1"

let g:ctrlp_map = 'Q' " This is the default
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_match_window = 'bottom,order:btt,min:1,max:20,results:20'
nnoremap <localleader>b :CtrlPBuffer<cr>
nnoremap <localleader>Q :CtrlPTag<cr>
nnoremap <localleader><localleader>l :CtrlPLine<cr>

" Ignore files in .gitignore
let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.pdf     " Linux/MacOSX



"  Binary {{{1  "
"""""""""""""""""
if has("autocmd")
  augroup Binary
    au!
    au BufReadPost * if &binary | %!xxd
    au BufReadPost * set ft=xxd | endif
    au BufWritePre * if &binary | %!xxd -r
    au BufWritePre * endif
    au BufWritePost * if &binary | %!xxd
    au BufWritePost * set nomod | endif
  augroup END
endif


"  vim-run {{{1  "
""""""""""""""""""
nnoremap <localleader><localleader>r :call VIMRun()<cr>



"  Keymaps {{{1  "
""""""""""""""""""

command! -nargs=0 Hebrew    set keymap=hebrew-qwerty | set rightleft
command! -nargs=0 Arabic    set keymap=arabic-qwerty | set rightleft
command! -nargs=0 NoSemitic set keymap= | set norightleft

command! -nargs=0 Russian   set keymap=russian-qwerty

if &arabic
  set keymap=arabic-qwerty
endif
if &hkmap
  set keymap=hebrew-qwerty
endif
"  Plot {{{1  "
"""""""""""""""

function! Plot(...)
  "echo getline(".")
  let s:currentLineN = line(".")
  let s:lastLineN = line("'>")
  if len(a:000) == 0
    let plot_options="u 1:2"
  else
    let plot_options=join(a:000," ")
  endif
  if s:currentLineN == s:lastLineN
    exec "'<,'>!gnuplot -e \"set terminal dumb ; plot '<cat' ".plot_options."\""
  endif
endfunction

" Ctags {{{1 "

" Set default tags filename as 'tags' 
set tags+=tags


"  Latex {{{1  "
""""""""""""""""

function! AsciiTex()
  exec ".!asciiTeX '".getline(".")."'"
endfunction
nnoremap <localleader>ll :VimtexLabelsOpen<cr>
"let g:vimtex_view_method='mupdf'


"  Moving around  {{{1"

"go to the next parentheses
onoremap in( :<c-u>normal! f(vi(<cr>


"  Syntastic  {{{1"

"from repository of syntastic 
let g:syntastic_always_populate_loc_list = 0
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
" ignore some anoying warnings


"  Statusline  {{{1"

" To get the statusline shown
set laststatus=2

" The current file
"set statusline+=%f

"if ! exists("NO_SPARTAN")
  "set statusline+=%#warningmsg#
  "set statusline+=%{SyntasticStatuslineFlag()}
  "set statusline+=%*
"endif

nnoremap <localleader>ts :SyntasticToggleMode<cr>


"  Color theme  {{{1"

if &term ==# "xterm"
  " Sometimes when environment variable TERM is only set
  " to xterm, I have problems with colors, so I try to
  " force 256 colors and not only 8
  let &term = "xterm-256color"
elseif &term ==# "screen"
  let &t_Co = 256
elseif &term ==# "linux"
  let &t_Co = 8
endif

if has("unix")
  if &term=="linux"
    color default
    set background=dark
  else
    let g:solarized_termcolors=256
    "colorscheme solarized
    colorscheme default
    set background=dark
  endif
else
  color default
  set background=dark
endif

if &term =~ "xterm\\|rxvt"
" use an orange cursor in insert mode
  let &t_EI = "\<Esc>]12;orange\x7"
  " use a red cursor otherwise
  let &t_SI = "\<Esc>]12;red\x7"
  silent !echo -ne "\033]12;red\007"
  " reset cursor when vim exits
  autocmd VimLeave * silent !echo -ne "\033]112\007"
  " use \003]12;gray\007 for gnome-terminal and rxvt up to version 9.21
endif

if has("gui_running")
  set guioptions-=m  "remove menu bar
  set guioptions-=T  "remove toolbar
  set guioptions-=r  "remove right-hand scroll bar
  set guioptions-=L  "remove left-hand scroll bar
  set guifont=Monospace\ 13
  color solarized
  set background=dark
endif

" Spelling {{{1 "

"English as a default languages, needless to say
"it is the default language of vim
if exists("+spelllang")
  set spelllang=en_gb
endif

" abbreviations {{{1
cabbrev ct !ctags -R .
cabbrev col column -t -s
cabbrev gma !git -C <C-R>=expand("%:p:h")<CR> commit -a
cabbrev ga !git -C <C-R>=expand("%:p:h")<CR> add <C-R>=expand("%:p")<CR>
cabbrev gm !git -C <C-R>=expand("%:p:h")<CR> commit
cabbrev gp !git -C <C-R>=expand("%:p:h")<CR> push
cabbrev gu !git -C <C-R>=expand("%:p:h")<CR> pull
cabbrev gs !git -C <C-R>=expand("%:p:h")<CR> status

" local vimrc {{{1

let local_vimrc = ".vimrc.local"
if len(globpath(".", local_vimrc)) != 0
  exec ":silent source ".local_vimrc
endif


" Configuration file edit options {{{1
" vim:foldmethod=marker nospell

