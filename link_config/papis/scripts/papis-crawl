#! /usr/bin/env python3
# papis-short-help: Crawl dois using a seed doi

import sys
import logging

def header(msg):    print("\n\033[1m"+str(msg)+"\033[0m")
def success(msg):   print(" \033[1;32m==>\033[0m  "+str(msg))
def error(msg):     print(" \033[1;31mX\033[0m  "+str(msg))
def arrow(msg):     print(" \033[1;34m==>\033[0m  "+str(msg))
def warning(msg):   print(" \033[0;93m==>\033[0m  "+str(msg))

logging.basicConfig(level=logging.DEBUG)

if len(sys.argv) > 1 and sys.argv[1] == "-h":
    print("""
    papis crawl [seed doi]
    """)
    sys.exit(0)

import os
import yaml
import hashlib
import itertools
import papis.api
import papis.config
import papis.utils


def crawl(doi):
    folder = hashlib.md5(doi.encode()).hexdigest()
    folder = 'doi/'+folder
    if not os.path.exists(folder):
        os.makedirs(folder)
    path = folder+'/info.yaml'
    if not os.path.exists(path):
        fd = open(path, 'w+')
        data = papis.utils.doi_to_data(doi)
        yaml.dump(data, fd, default_flow_style=False)
    else:
        fd = open(path)
        data = yaml.load(fd)
    fd.close()
    try:
        return [d['doi'] for d in data['citations']]
    except KeyError:
        return []


seed_doi = sys.argv[1] if len(sys.argv) > 1 else '10.1063/1.3611401'
dois = [seed_doi]

for i in range(3):
    header('%s Iteration' % i)
    dois = list(itertools.chain.from_iterable([crawl(d) for d in dois]))
    arrow(' %s dois retrieved ' % len(dois))


