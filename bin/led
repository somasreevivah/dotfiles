#! /usr/bin/env python3
# -*- coding: utf-8 -*-


import sys

if sys.version_info < (3, 0):
    raise Exception("This script must use python 3.0 or greater")
    sys.exit(1)

import argparse
import configparser
import os
import time
import json


VERBOSE=False
def printv(arg1):
    """
    Verbose print
    """
    if VERBOSE:
        print(arg1)

#  Configuration class {{{1  #
##############################

class Configuration(configparser.ConfigParser):

    default_info={
        "general": {
            'dir' : '~/.led',
            'default' : 'expenses'
        },
        "expenses": {
            'file' : 'general.json'
        }
    }

    DEFAULT_FILE_LOCATION= os.path.join(os.path.expanduser("~"), ".led.conf")
    def __init__(self):
        configparser.ConfigParser.__init__(self)
        self.initialize()
    def initialize(self):
        if os.path.exists(self.DEFAULT_FILE_LOCATION):
            self.read(self.DEFAULT_FILE_LOCATION)
        else:
            for section in self.default_info:
                self[section] = {}
                for field in self.default_info[section]:
                    self[section][field] = self.default_info[section][field]
            with open(self.DEFAULT_FILE_LOCATION, "w") as configfile:
                self.write(configfile)

#  Database class {{{1  #
#########################

class Database(object):

    def __init__(self, conf, general):
        self.conf = conf
        self.general = general
        self.initFile()

    def initDir(self):
        try:
            self.folder = os.path.expanduser(self.conf["dir"])
        except KeyError:
            self.folder = os.path.expanduser(self.general["dir"])
        printv(self.folder)
        if not os.path.exists(self.folder):
            printv("Creating folder %s"%self.folder)
            os.mkdir(self.folder)
        else:
            printv("Folder %s found"%self.folder)
    def getDir(self):
        self.initDir()
        return self.folder

    def initFile(self):
        printv("Initialising files")
        folder        = self.getDir()
        self.filepath = os.path.join(folder,self.conf.get("file"))
        self.fd       = open(self.filepath,"a+")
    def json2dict(self, json_string):
        return json.loads(json_string)
    def dict2json(self, dictionary):
        return json.dumps(dictionary)
    def append(self, dictionary):
        self.fd.write(self.dict2json(dictionary)+"\n")


#  Expense class {{{1  #
########################

class Expense(object):
    def __init__(self, dictionary=dict()):
        self.concept   = ""
        self.expense   = True
        self.amount    = 0
        self.timestamp = time.time()
        self.tags      = []
        self.currency  = "EUR"
        for key in dictionary:
            setattr(self, key, dictionary[key])
    def getProps(self):
        return [x for x in dir(a) if not x.startswith("__")]
    def pretty_print(self):
        for key in self.getProps():
            print("%s %s"%(key, getattr(self, key)))




def interactiveAdd(**kwargs):
    data = dict()
    for key in kwargs:
        value = kwargs[key]
        if value:
            data[key] = value
        else:
            if key == "tags":
                data[key] = input("%s: "%key).split()
            elif key == "date":
                buf = input("%s: "%key).split()
                data[key] = [ int(x) for x in buf ]
                if len(data[key]) == 1:
                    month = int(time.strftime("%m"))
                    year = int(time.strftime("%Y"))
                    data[key]+=[month, year]
                elif len(data[key]) == 2:
                    year = int(time.strftime("%Y"))
                    data[key]+=[month, year]
                elif len(data[key]) == 3:
                    if data[key][2]<100:
                        data[key][2]+=2000
            elif key == "amount":
                data[key] = float(amount)

            data[key] = input("%s: "%key)
    return data



#  Main {{{1  #
###############

if __name__ == "__main__":

    printv("Getting configuration")
    config = Configuration()

    parser = argparse.ArgumentParser(description="Led(ger), my expenses controler")
    parser.add_argument(
            "-v", "--verbose", 
            help="Make the output verbose", action="store_true"
            )
    parser.add_argument(
            "-c", "--config", 
            help="Use config section, default is %s"%config.default_info.get("general").get("default"),
            default=config.default_info.get("general").get("default"),
            action="store"
            )


    SUBPARSER_HELP="For further information for every command, type in 'led <command> -h'"
    subparsers = parser.add_subparsers(help=SUBPARSER_HELP,
            metavar="command",
            dest="command"
            )

    add_parser = subparsers.add_parser("add",
            help="Add expense"
            )

    add_parser.add_argument(
            "-a","--amount",
            help="Amount of money, negative for expense, positive for earning",
            action="store",
            type=float,
            default=False
            )
    add_parser.add_argument(
            "-c","--currency",
            help="Currency of the amount",
            action="store",
            type=str,
            default="EUR"
            )
    add_parser.add_argument(
            "-n","--concept", help="Concept of the expense",
            action="store",
            type=str,
            default=False
            )
    add_parser.add_argument(
            "-d","--date", help="Format: day month year. E.g.: 1 1 15",
            action="store",
            type=int,
            nargs="*",
            default=[int(x) for x in time.strftime("%d %m %Y").split()]
            )
    add_parser.add_argument(
            "-t","--tags", help="Tags",
            action="store",
            type=str,
            nargs="*",
            default=False
            )


    # Parse arguments
    args = parser.parse_args()

    if args.verbose:
        print("Making the command verbose...")
        VERBOSE=True
    else:
        VERBOSE=False

    printv(args)



    printv("Instantiating database")
    db = Database(config[args.config], config["general"])

    if args.command == "add":
        entry = interactiveAdd(
                amount=args.amount,
                currency=args.currency,
                concept=args.concept,
                date=args.date,
                tags=args.tags
                )
        db.append(entry)




# vim: ft=python
#vim-run: clear; python3 % -v add
