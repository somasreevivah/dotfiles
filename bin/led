#! /usr/bin/env python3
# -*- coding: utf-8 -*-


import argparse
import configparser






#  Configuration class {{{1  #
##############################

class Configuration(configparser.ConfigParser):

    default_info={
        "general": {
            'dir' : '~/.led'
        },
        "led-general": {
            'file' : 'general.led'
        }
    }

    DEFAULT_FILE_LOCATION= os.path.join(os.path.expanduser("~"), ".led.conf")
    def __init__(self):
        configparser.ConfigParser.__init__(self)
        self.initialize()
    def initialize(self):
        if os.path.exists(self.DEFAULT_FILE_LOCATION):
            self.read(self.DEFAULT_FILE_LOCATION)
        else:
            for section in self.default_info:
                self[section] = {}
                for field in self.default_info[section]:
                    self[section][field] = self.default_info[section][field]
            with open(self.DEFAULT_FILE_LOCATION, "w") as configfile:
                self.write(configfile)

#  Database class {{{1  #
#########################

class Database(object):

    def __init__(self, filepath):
        pass






def printv(arg1):
    """
    Verbose print
    """
    if VERBOSE:
        print(arg1)


#  Main {{{1  #
###############

if __name__=="__main__" :

    parser = argparse.ArgumentParser(description="Led(ger), my expenses controler")
    parser.add_argument("-v", "--verbose", help="Make the output verbose", action="store_true")
    parser.add_argument("-f", help="Input file.", action="store")
    # Parse arguments
    args = parser.parse_args()

    if args.verbose:
        print("Making the command verbose...")
        VERBOSE=True
    else:
        VERBOSE=False


    config = Configuration()





#vim-run: python %
# vim: ft=python
