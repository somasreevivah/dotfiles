#! /usr/bin/env python3
# -*- coding: utf-8 -*-


import sys

if sys.version_info < (3, 0):
    raise Exception("This script must use python 3.0 or greater")
    sys.exit(1)

import argparse
import configparser
import os
import time


VERBOSE=False
def printv(arg1):
    """
    Verbose print
    """
    if VERBOSE:
        print(arg1)

#  Configuration class {{{1  #
##############################

class Configuration(configparser.ConfigParser):

    default_info={
        "general": {
            'dir' : '~/.led'
        },
        "expenses": {
            'file' : 'general.json'
        }
    }

    DEFAULT_FILE_LOCATION= os.path.join(os.path.expanduser("~"), ".led.conf")
    def __init__(self):
        configparser.ConfigParser.__init__(self)
        self.initialize()
    def initialize(self):
        if os.path.exists(self.DEFAULT_FILE_LOCATION):
            self.read(self.DEFAULT_FILE_LOCATION)
        else:
            for section in self.default_info:
                self[section] = {}
                for field in self.default_info[section]:
                    self[section][field] = self.default_info[section][field]
            with open(self.DEFAULT_FILE_LOCATION, "w") as configfile:
                self.write(configfile)

#  Database class {{{1  #
#########################

class Database(object):

    def __init__(self, conf, general):
        self.conf = conf
        self.general = general
        self.initFile()

    def initDir(self):
        try:
            self.folder = os.path.expanduser(self.conf["dir"])
        except KeyError:
            self.folder = os.path.expanduser(self.general["dir"])
        printv(self.folder)
        if not os.path.exists(self.folder):
            printv("Creating folder %s"%self.folder)
            os.mkdir(self.folder)
        else:
            printv("Folder %s found"%self.folder)
    def getDir(self):
        self.initDir()
        return self.folder

    def initFile(self):
        printv("Initialising files")
        folder        = self.getDir()
        self.filepath = os.path.join(folder,self.conf.get("file"))
        self.fd       = open(self.filepath,"a+")


#  Expense class {{{1  #
########################

class Expense(object):
    def __init__(self, dictionary=dict()):
        self.concept=""
        self.expense=True
        self.amount=0
        self.timestamp=time.time()
        for key in dictionary:
            setattr(self, key, dictionary[key])







#  Main {{{1  #
###############

if __name__=="__main__" :

    parser = argparse.ArgumentParser(description="Led(ger), my expenses controler")
    parser.add_argument("-v", "--verbose", help="Make the output verbose", action="store_true")
    # Parse arguments
    args = parser.parse_args()

    if args.verbose:
        print("Making the command verbose...")
        VERBOSE=True
    else:
        VERBOSE=False


    config = Configuration()
    db = Database(config["expenses"], config["general"])





# vim: ft=python
#vim-run: python3 % -v
