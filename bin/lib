#! /usr/bin/env bash
function header()   { echo -e "\n\033[1m$@\033[0m";        }
function success()  { echo -e " \033[1;32m==>\033[0m  $@"; }
function error()    { echo -e " \033[1;31mX\033[0m  $@";   }
function arrow()    { echo -e " \033[1;34m==>\033[0m  $@"; }
function warning()  { echo -e " \033[0;93m==>\033[0m  $@"; }

if ! test pick ; then
  error "Please install the program pick"
  echo -e "\thttps://github.com/calleerlandsson/pick"
  exit 1
fi

__SCRIPT_VERSION="0.0.1"
__SCRIPT_NAME=$( basename $0 )
__DESCRIPTION="Library searcher"
__OPTIONS=":hv:"

PDF_VIEWER="zathura --fork"
PS_VIEWER="zathura --fork"
DOC_VIEWER="libreoffice"
HTML_VIEWER="firefox"
CONFIG_FILE="$HOME/.librc"
TEXT_VIEWER="${EDITOR}"
VIDEO_VIEWER="mplayer"
MUSIC_VIEWER="mplayer"

COMMANDS=(default)

default_PATH=${default_PATH}:~/Documents/
default_PICKER=dmenuSearcher
default_PICKER=pickSearcher
default_SEARCHER=defaultSearcher
default_ACTION=defaultAction

defaultAction() {
  local filePath
  read filePath
  openDocument "${filePath}"
}

defaultSearcher(){
  for path in $(tr ":" " " <<<"${!CURRENT_PATH}") ; do
    find ${path} -type f
  done
}

sourceConfigFile() {
  [[ -f ${CONFIG_FILE} ]] && source ${CONFIG_FILE}
}

registerCommand(){
  local cmd=$1
  COMMANDS=(${cmd} ${COMMANDS[@]})
}

setCurrentVariables() {
  local vars=(
    _PATH
    _PICKER
    _SEARCHER
    _ACTION
  )
  local variable
  for var in ${vars[@]} ; do
    variable=${CURRENT_COMMAND}${var}
    if test ${!variable}; then
      eval "CURRENT${var}=${variable}"
    else
      eval "CURRENT${var}=default${var}"
    fi
  done
}

openDocument() {
  local document=$1
  [[ ! -f "${document}" ]] && { warning "Empty selection"; return ; }
  if file -b "${document}" | grep PDF 2>&1 >/dev/null ; then
    ${PDF_VIEWER} "${document}"
  elif file -b "${document}" | grep PS 2>&1 >/dev/null ; then
    ${PS_VIEWER} "${document}"
  elif file -b "${document}" | grep ISO 2>&1 >/dev/null ; then
    ${VIDEO_VIEWER} "${document}"
  elif file -b "${document}" | grep Flash 2>&1 >/dev/null ; then
    ${VIDEO_VIEWER} "${document}"
  elif file -b "${document}" | grep audio 2>&1 >/dev/null ; then
    ${MUSIC_VIEWER} "${document}"
  elif [[ "${document}" =~ \.(doc|xls)$ ]]; then
    ${DOC_VIEWER} "${document}"
  elif \
    file -b "${document}" | grep ASCII 2>&1 >/dev/null \
    || [[ "${document}" =~ \.(f90|py|c|cxx|html)$ ]] \
    || [[ "${document}" =~ \.(cpp|m|asm|rb|sh)$ ]]; then
    ${TEXT_VIEWER} "${document}"
  else
    error "I do not know how to open this file ..."
    error "Could not open file ${document}"
  fi
}

pickSearcher() {
  local terms="$@"
  while read line; do
    echo $line
  done \
    | pick $([[ -n "${@}" ]] && echo '-q '"$@")
}

dmenuSearcher() {
  #urxvt.font: xft:Inconsolata:size=12
  while read line; do
    echo ${line}
  done \
    | dmenu -i -fn '-bitstream-*-*-*-*-*-18-*-*-*-*-*-*-*' -l 20
}

usage_head() { echo "Usage :  $__SCRIPT_NAME [-h|-help] [-v|-version]"; }
usage ()
{
cat <<EOF
$(usage_head)

    $__DESCRIPTION

    Options:
      -h|help       Display this message
      -v|version    Display script version


    This program is maintained by Alejandro Gallo.
EOF
}    # ----------  end of function usage  ----------

while getopts $__OPTIONS opt; do
  case $opt in

  h|help     )  usage; exit 0   ;;

  v|version  )  echo "$__SCRIPT_NAME -- Version $__SCRIPT_VERSION"; exit 0   ;;

  * )  echo -e "\n  Option does not exist : $OPTARG\n"
      usage_head; exit 1   ;;

  esac    # --- end of case ---
done
shift $(($OPTIND-1))

sourceConfigFile

for cmd in ${COMMANDS[@]} ; do
  if [[ ${cmd} = $1 ]]; then
    CURRENT_COMMAND=$1
    shift
  fi
done

setCurrentVariables

${!CURRENT_SEARCHER} \
  | ${!CURRENT_PICKER} \
  | ${!CURRENT_ACTION}


# vim-run: bash %
# vim-run: bash % papers
# vim-run: bash % vid
# vim: ft=sh
